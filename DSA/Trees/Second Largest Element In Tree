/*Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40*/

import java.util.*;

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
		if(root == null)
			return null;
		// Write your code here
		Queue<TreeNode<Integer>> remNodes = new LinkedList<>();
        remNodes.add(root);
        int firstLarger = Integer.MIN_VALUE, secondLarger = Integer.MIN_VALUE;
        TreeNode<Integer> secondLargerNode = null,firstLargerNode=null;
        while(!remNodes.isEmpty())
        {
            TreeNode<Integer> temp = remNodes.poll();
            if(temp.data > firstLarger && temp.data > secondLarger)
            {
                secondLargerNode = firstLargerNode;
                if(firstLargerNode!=null)
                	secondLarger = firstLargerNode.data;
                firstLargerNode = temp;
                firstLarger = temp.data;
            }
            
            if(temp.data < firstLarger && temp.data > secondLarger)
            {
                secondLargerNode = temp;
                secondLarger = temp.data;
            }
            
            for(int i=0;i<temp.children.size();i++)
            	remNodes.add(temp.children.get(i));
        }
        return secondLargerNode;
	}
	
	
}
