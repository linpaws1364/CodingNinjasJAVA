/*Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.*/

/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */

public class BinarySearchTree {
    private BinaryTreeNode<Integer> root;
    
    private static BinaryTreeNode<Integer> insertHelper(BinaryTreeNode<Integer> root, int data){
         if(root==null)
        {
            BinaryTreeNode<Integer> ans = new BinaryTreeNode<>(data);
             return ans;
        }
       
        if(root.data >= data)
        {
            BinaryTreeNode<Integer> left = insertHelper(root.left, data);
            root.left = left;
            return root;
        }
        
        if(root.data< data)
        {
            BinaryTreeNode<Integer> right = insertHelper(root.right, data);
            root.right = right;
            return root;
        }
        
        BinaryTreeNode<Integer> equalNode = new BinaryTreeNode<>(data);
        equalNode.right = root.right;
        root.right = equalNode;
        return root;
    }
    
	public void insert(int data) {
		//Implement the insert() function
       root = insertHelper(root,data);
	}
    
	private static int findMinRightSubTree(BinaryTreeNode<Integer> root)
    {
        if(root==null)
            return Integer.MAX_VALUE;
        
        int left = findMinRightSubTree(root.left);
        return Math.min(root.data,left);
    }
    
    private static BinaryTreeNode<Integer> removeFromRightSubTree(BinaryTreeNode<Integer> root, int min)
    {
        if(root.data == min)
        {
            return null;
        }
        
        BinaryTreeNode<Integer> ans = removeFromRightSubTree(root.left,min);
        return ans;
    }
    
    private static BinaryTreeNode<Integer> removeHelper(BinaryTreeNode<Integer> root, int data)
    {
        if(root == null)
            return null;
        
        
        if(root.data > data){
              root.left = removeHelper(root.left, data);
              return root;
            }
            
        
        if(root.data < data ){
           root.right = removeHelper(root.right, data);
            return root;
        }
        
            if(root.left==null && root.right!=null)
                return root.right;
            else if(root.left!=null && root.right==null)
                return root.left;
            else if(root.left==null && root.right==null)
                return null;
        
                BinaryTreeNode<Integer> minNode = new BinaryTreeNode<>(findMinRightSubTree(root.right));
                int min = minNode.data;
                root.right = removeFromRightSubTree(root.right,min);
                minNode.right =root.right;
                minNode.left = root.left;
                return minNode;      
    }
    
    
	public void remove(int data) {
		//Implement the remove() function
        root = removeHelper(root,data);
	}
	
    private static void printHelper(BinaryTreeNode<Integer> root)
    {
        if(root == null )
            return;
        
        System.out.print(root.data+":");
        if(root.left!=null)
            System.out.print("L:"+root.left.data+",");
        if(root.right!=null)
            System.out.print("R:"+root.right.data);
        System.out.println();
        printHelper(root.left);
        printHelper(root.right);
    }
    
	public void printTree() {
		//Implement the printTree() function
        printHelper(root);
	}
	
    private static boolean searchHelper(int data, BinaryTreeNode<Integer> root)
    {
        if(root == null )
            return false;
        
        if(root.data == data)
            return true;
        
        boolean left = searchHelper(data, root.left);
        boolean right = searchHelper(data, root.right);
        return (left || right);
    }
    
	public boolean search(int data) {
		//Implement the search() function
        return searchHelper(data,root);
	}
	

}
